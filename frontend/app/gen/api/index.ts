/**
 * Generated by orval v7.5.0 üç∫
 * Do not edit manually.
 * Todos example
 * The todos API description
 * OpenAPI spec version: 1.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  CreateTodo400,
  CreateTodoDto,
  GetTodo400,
  GetTodo404,
  GetTodo500,
  GetTodos500,
  UpdateTodo400,
  UpdateTodoDto,
} from "../types";
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";
import type { Todo } from "../types";
import { customInstance } from "../../api/mutator/custom-axios-instance";

type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];

export const createTodo = (
  createTodoDto: CreateTodoDto,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Todo>(
    {
      url: `/api/todos`,
      method: "POST",
      headers: { "Content-Type": "application/json" },
      data: createTodoDto,
      signal,
    },
    options,
  );
};

export const getCreateTodoMutationOptions = <
  TError = CreateTodo400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTodo>>,
    TError,
    { data: CreateTodoDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createTodo>>,
  TError,
  { data: CreateTodoDto },
  TContext
> => {
  const mutationKey = ["createTodo"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createTodo>>,
    { data: CreateTodoDto }
  > = (props) => {
    const { data } = props ?? {};

    return createTodo(data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof createTodo>>
>;
export type CreateTodoMutationBody = CreateTodoDto;
export type CreateTodoMutationError = CreateTodo400;

export const useCreateTodo = <
  TError = CreateTodo400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createTodo>>,
    TError,
    { data: CreateTodoDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof createTodo>>,
  TError,
  { data: CreateTodoDto },
  TContext
> => {
  const mutationOptions = getCreateTodoMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getTodos = (
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Todo[]>(
    { url: `/api/todos`, method: "GET", signal },
    options,
  );
};

export const getGetTodosQueryKey = () => {
  return [`/api/todos`] as const;
};

export const getGetTodosQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = GetTodos500,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodosQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodos>>> = ({
    signal,
  }) => getTodos(requestOptions, signal);

  return { queryKey, queryFn, ...queryOptions } as UseQueryOptions<
    Awaited<ReturnType<typeof getTodos>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetTodosQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodos>>
>;
export type GetTodosQueryError = GetTodos500;

export function useGetTodos<
  TData = Awaited<ReturnType<typeof getTodos>>,
  TError = GetTodos500,
>(options?: {
  query?: UseQueryOptions<Awaited<ReturnType<typeof getTodos>>, TError, TData>;
  request?: SecondParameter<typeof customInstance>;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTodosQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const updateTodo = (
  id: string,
  updateTodoDto: UpdateTodoDto,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<Todo>(
    {
      url: `/api/todos/${id}`,
      method: "PATCH",
      headers: { "Content-Type": "application/json" },
      data: updateTodoDto,
    },
    options,
  );
};

export const getUpdateTodoMutationOptions = <
  TError = UpdateTodo400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodo>>,
    TError,
    { id: string; data: UpdateTodoDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateTodo>>,
  TError,
  { id: string; data: UpdateTodoDto },
  TContext
> => {
  const mutationKey = ["updateTodo"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateTodo>>,
    { id: string; data: UpdateTodoDto }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateTodo(id, data, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateTodo>>
>;
export type UpdateTodoMutationBody = UpdateTodoDto;
export type UpdateTodoMutationError = UpdateTodo400;

export const useUpdateTodo = <
  TError = UpdateTodo400,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateTodo>>,
    TError,
    { id: string; data: UpdateTodoDto },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateTodo>>,
  TError,
  { id: string; data: UpdateTodoDto },
  TContext
> => {
  const mutationOptions = getUpdateTodoMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getTodo = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
  signal?: AbortSignal,
) => {
  return customInstance<Todo>(
    { url: `/api/todos/${id}`, method: "GET", signal },
    options,
  );
};

export const getGetTodoQueryKey = (id: string) => {
  return [`/api/todos/${id}`] as const;
};

export const getGetTodoQueryOptions = <
  TData = Awaited<ReturnType<typeof getTodo>>,
  TError = GetTodo400 | GetTodo404 | GetTodo500,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
) => {
  const { query: queryOptions, request: requestOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetTodoQueryKey(id);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getTodo>>> = ({
    signal,
  }) => getTodo(id, requestOptions, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    ...queryOptions,
  } as UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData> & {
    queryKey: QueryKey;
  };
};

export type GetTodoQueryResult = NonNullable<
  Awaited<ReturnType<typeof getTodo>>
>;
export type GetTodoQueryError = GetTodo400 | GetTodo404 | GetTodo500;

export function useGetTodo<
  TData = Awaited<ReturnType<typeof getTodo>>,
  TError = GetTodo400 | GetTodo404 | GetTodo500,
>(
  id: string,
  options?: {
    query?: UseQueryOptions<Awaited<ReturnType<typeof getTodo>>, TError, TData>;
    request?: SecondParameter<typeof customInstance>;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
  const queryOptions = getGetTodoQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
}

export const deleteTodo = (
  id: string,
  options?: SecondParameter<typeof customInstance>,
) => {
  return customInstance<void>(
    { url: `/api/todos/${id}`, method: "DELETE" },
    options,
  );
};

export const getDeleteTodoMutationOptions = <
  TError = unknown,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodo>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteTodo>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationKey = ["deleteTodo"];
  const { mutation: mutationOptions, request: requestOptions } = options
    ? options.mutation &&
      "mutationKey" in options.mutation &&
      options.mutation.mutationKey
      ? options
      : { ...options, mutation: { ...options.mutation, mutationKey } }
    : { mutation: { mutationKey }, request: undefined };

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteTodo>>,
    { id: string }
  > = (props) => {
    const { id } = props ?? {};

    return deleteTodo(id, requestOptions);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteTodoMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteTodo>>
>;

export type DeleteTodoMutationError = unknown;

export const useDeleteTodo = <TError = unknown, TContext = unknown>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteTodo>>,
    TError,
    { id: string },
    TContext
  >;
  request?: SecondParameter<typeof customInstance>;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteTodo>>,
  TError,
  { id: string },
  TContext
> => {
  const mutationOptions = getDeleteTodoMutationOptions(options);

  return useMutation(mutationOptions);
};

export const getCreateTodoResponseMock = (
  overrideResponse: Partial<Todo> = {},
): Todo => ({
  id: faker.string.alpha(20),
  name: faker.string.alpha(20),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  status: faker.helpers.arrayElement([
    "done",
    "in_progress",
    "ready_to_start",
  ] as const),
  ...overrideResponse,
});

export const getGetTodosResponseMock = (): Todo[] =>
  Array.from(
    { length: faker.number.int({ min: 1, max: 10 }) },
    (_, i) => i + 1,
  ).map(() => ({
    id: faker.string.alpha(20),
    name: faker.string.alpha(20),
    createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
    status: faker.helpers.arrayElement([
      "done",
      "in_progress",
      "ready_to_start",
    ] as const),
  }));

export const getUpdateTodoResponseMock = (
  overrideResponse: Partial<Todo> = {},
): Todo => ({
  id: faker.string.alpha(20),
  name: faker.string.alpha(20),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  status: faker.helpers.arrayElement([
    "done",
    "in_progress",
    "ready_to_start",
  ] as const),
  ...overrideResponse,
});

export const getGetTodoResponseMock = (
  overrideResponse: Partial<Todo> = {},
): Todo => ({
  id: faker.string.alpha(20),
  name: faker.string.alpha(20),
  createdAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  updatedAt: `${faker.date.past().toISOString().split(".")[0]}Z`,
  status: faker.helpers.arrayElement([
    "done",
    "in_progress",
    "ready_to_start",
  ] as const),
  ...overrideResponse,
});

export const getCreateTodoMockHandler = (
  overrideResponse?:
    | Todo
    | ((
        info: Parameters<Parameters<typeof http.post>[1]>[0],
      ) => Promise<Todo> | Todo),
) => {
  return http.post("*/api/todos", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getCreateTodoResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetTodosMockHandler = (
  overrideResponse?:
    | Todo[]
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Todo[]> | Todo[]),
) => {
  return http.get("*/api/todos", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTodosResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getUpdateTodoMockHandler = (
  overrideResponse?:
    | Todo
    | ((
        info: Parameters<Parameters<typeof http.patch>[1]>[0],
      ) => Promise<Todo> | Todo),
) => {
  return http.patch("*/api/todos/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getUpdateTodoResponseMock(),
      ),
      { status: 200, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getGetTodoMockHandler = (
  overrideResponse?:
    | Todo
    | ((
        info: Parameters<Parameters<typeof http.get>[1]>[0],
      ) => Promise<Todo> | Todo),
) => {
  return http.get("*/api/todos/:id", async (info) => {
    await delay(1000);

    return new HttpResponse(
      JSON.stringify(
        overrideResponse !== undefined
          ? typeof overrideResponse === "function"
            ? await overrideResponse(info)
            : overrideResponse
          : getGetTodoResponseMock(),
      ),
      { status: 201, headers: { "Content-Type": "application/json" } },
    );
  });
};

export const getDeleteTodoMockHandler = (
  overrideResponse?:
    | void
    | ((
        info: Parameters<Parameters<typeof http.delete>[1]>[0],
      ) => Promise<void> | void),
) => {
  return http.delete("*/api/todos/:id", async (info) => {
    await delay(1000);
    if (typeof overrideResponse === "function") {
      await overrideResponse(info);
    }
    return new HttpResponse(null, { status: 200 });
  });
};
export const getTodosExampleMock = () => [
  getCreateTodoMockHandler(),
  getGetTodosMockHandler(),
  getUpdateTodoMockHandler(),
  getGetTodoMockHandler(),
  getDeleteTodoMockHandler(),
];
